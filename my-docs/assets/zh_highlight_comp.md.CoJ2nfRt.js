import{_ as s,c as n,o as a,R as l,a7 as p,a8 as o,a9 as e,aa as t}from"./chunks/framework.NkhF8npB.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/highlight/comp.md","filePath":"zh/highlight/comp.md","lastUpdated":1754644617000}'),c={name:"zh/highlight/comp.md"},r=l('<h2 id="_1-虚拟列表的组件封装" tabindex="-1">1. 虚拟列表的组件封装 <a class="header-anchor" href="#_1-虚拟列表的组件封装" aria-label="Permalink to &quot;1. 虚拟列表的组件封装&quot;">​</a></h2><blockquote><p><strong>原理</strong></p><ul><li>设置一个<strong>可视区域</strong>，然后用户在滚动列表的时候，本质上是<strong>动态修改可视区域里面的内容</strong></li></ul><p><strong>技术细节</strong></p><p>动态修改可以采用动态截断数组数据的操作来实现，因此需要得到一些信息：</p><ol><li>可视区域<strong>起始数据索引(startIndex)</strong></li><li>可视区域<strong>结束数据索引(endIndex)</strong></li><li>可视区域的数据，利用上述的startIndex和endIndex<strong>截断</strong></li><li>整个列表中的<strong>偏移位置 startOffset</strong></li></ol></blockquote><h3 id="简单实现-假设每一项定高" tabindex="-1">简单实现：假设每一项定高 <a class="header-anchor" href="#简单实现-假设每一项定高" aria-label="Permalink to &quot;简单实现：假设每一项定高&quot;">​</a></h3><p>如下图所示：</p><img src="'+p+`" style="zoom:50%;"><p>整个虚拟列表的设计如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 可视区域容器 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;infinite-list-container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- 这是容器里面的占位，高度是总列表高度，用于形成滚动条 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;infinite-list-phantom&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- 列表项渲染区域 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;infinite-list&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- item-1 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- item-2 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- ...... --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- item-n --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 可视区域容器 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;infinite-list-container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- 这是容器里面的占位，高度是总列表高度，用于形成滚动条 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;infinite-list-phantom&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- 列表项渲染区域 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;infinite-list&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- item-1 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- item-2 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- ...... --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- item-n --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>infinite-list-container: 可视区域容器</li><li>infinite-list-phantom： 这是容器里面的占位，高度是总列表高度，用于形成滚动条</li><li>infinite-list：列表项渲染区域</li></ul><p>如下图所示：</p><img src="`+o+'" style="zoom:50%;"><p>接下来监听 infinite-list-container 的 scroll 事件，获取滚动位置的 scrollTop</p><ul><li>假定可视区域高度固定，称之为 screenHeight</li><li>假定列表每项高度固定，称之为 itemSize</li><li>假定列表数据称之为 listData</li><li>假定当前滚动位置称之为 scrollTop</li></ul><p>那么我们能够计算出这么一些信息：</p><ol><li>列表总高度 listHeight = listData.length * itemSize</li><li>可显示的列表项数 visibleCount = Math.ceil(screenHeight / itemSize)</li><li>数据的起始索引 startIndex = Math.floor(scrollTop / itemSize)</li><li>数据的结束索引 endIndex = startIndex + visibleCount</li><li>列表显示数据为 visibleData = listData.slice(startIndex, endIndex)</li></ol><p>当发生滚动之后，由于渲染区域相对于可视区域发生了偏移。我们需要计算出来这个偏移量，然后使用 transform 将 list 重新移回到可视区域。</p><p>偏移量 startOffset = scrollTop - (scrollTop % itemSize)</p><img src="'+e+`" style="zoom:50%;"><h3 id="优化点1-动态高度-每一项内容不定高" tabindex="-1">优化点1：动态高度，每一项内容不定高 <a class="header-anchor" href="#优化点1-动态高度-每一项内容不定高" aria-label="Permalink to &quot;优化点1：动态高度，每一项内容不定高&quot;">​</a></h3><blockquote><p><strong>细节</strong></p><ol><li>在实际渲染之前是<strong>很难拿到每一项的真实高度</strong>的，那么要如何获取<strong>每一项的高度</strong>？</li><li>由于内容不定高，那么之前基于定高的计算信息则全部失效，那么如何重新<strong>基于不定高的方式</strong>去计算？</li><li>既然计算信息发生了变更，那么<strong>列表渲染方式</strong>有何改变？</li></ol><p><strong>解决方案</strong></p><p>问题1：采用<strong>预估</strong>的方式</p><p>具体做法：创建一个缓存列表，其中列表项字段为 索引、高度与定位，并<strong>预估列表项高度（estimatedItemSize）<strong>用于</strong>初始化缓存列表</strong>，在渲染后根据 DOM 实际情况<strong>更新缓存列表</strong>和<strong>设置真实高度</strong></p><p>问题2：新的计算信息</p><p>具体做法：</p><ol><li><p>列表总高度：首次渲染：listHeight = listData.length * estimatedItemSize ，后续渲染：<strong>缓存列表最后一项的定位字段的值</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateItemsSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> items.value </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTMLElement</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">  nodes.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.</span><span style="color:#B392F0;">getBoundingClientRect</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rect.height</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">node.id.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldHeight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> positions.value[index].height</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldHeight </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> height</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dValue) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      positions.value[index].bottom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> positions.value[index].bottom </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> dValue</span></span>
<span class="line"><span style="color:#E1E4E8;">      positions.value[index].height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> height</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> positions.value.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        positions.value[k].top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> positions.value[k </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].bottom</span></span>
<span class="line"><span style="color:#E1E4E8;">        positions.value[k].bottom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> positions.value[k].bottom </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> dValue</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateItemsSize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items.value </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">  nodes.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">node</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rect.height</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">node.id.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oldHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> positions.value[index].height</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldHeight </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> height</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dValue) {</span></span>
<span class="line"><span style="color:#24292E;">      positions.value[index].bottom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> positions.value[index].bottom </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> dValue</span></span>
<span class="line"><span style="color:#24292E;">      positions.value[index].height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> height</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> positions.value.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        positions.value[k].top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> positions.value[k </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].bottom</span></span>
<span class="line"><span style="color:#24292E;">        positions.value[k].bottom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> positions.value[k].bottom </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> dValue</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>可显示的列表项数：visibleCount = Math.ceil(screenHeight / estimatedItemSize )</p></li><li><p>数据的起始索引：<strong>在缓存列表中搜索第一个底部定位大于列表垂直偏移量的列表项，然后返回其索引</strong></p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">binarySearch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">list</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">[], </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tempIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> end) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> midIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">((start </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> end) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> midValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list[midIndex].bottom</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (midValue </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> midIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (midValue </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> midIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (midValue </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tempIndex </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> tempIndex </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> midIndex) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        tempIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> midIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> midIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tempIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">list</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[], </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tempIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> end) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> midIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">((start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> end) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> midValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list[midIndex].bottom</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (midValue </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> midIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (midValue </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">      start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> midIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (midValue </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tempIndex </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> tempIndex </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> midIndex) {</span></span>
<span class="line"><span style="color:#24292E;">        tempIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> midIndex</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> midIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tempIndex</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>这个缓存列表是一个有序的数组，那么使用二分查找效率会更高一些，时间复杂度相比之前的 O(<sub>n</sub>) 优化为了 O(logN)</strong></p><p>问题3：用于渲染页面元素的数据是根据 <strong>开始/结束索引</strong> 在 <strong>数据列表</strong> 中截断出来的，所以只要保证索引的正确计算，那么<strong>渲染方式是无需变化</strong>的</p></blockquote><h3 id="优化点2-滚动过快的白屏闪烁" tabindex="-1">优化点2：滚动过快的白屏闪烁 <a class="header-anchor" href="#优化点2-滚动过快的白屏闪烁" aria-label="Permalink to &quot;优化点2：滚动过快的白屏闪烁&quot;">​</a></h3><p>添加缓存区，整个渲染区域由 <strong>可视区 + 缓冲区</strong> 共同组成</p><img src="`+t+`" style="zoom:50%;"><blockquote><p><strong>具体做法</strong></p><p>增加一个 props 叫做 bufferScale，用于接收缓冲区数据和可视区域数据的一个比例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">props</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  bufferScale: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">props</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineProps</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  bufferScale: {</span></span>
<span class="line"><span style="color:#24292E;">    type: Number,</span></span>
<span class="line"><span style="color:#24292E;">    default: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>接下来就可以根据这个比例，计算出上下缓冲区的数量：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 上方缓冲区</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aboveCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(start.value, props.bufferScale </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> visibleCount.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 下方缓冲区</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">belowCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(props.listData.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> end.value, props.bufferScale </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> visibleCount.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 上方缓冲区</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">aboveCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(start.value, props.bufferScale </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> visibleCount.value)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 下方缓冲区</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">belowCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(props.listData.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> end.value, props.bufferScale </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> visibleCount.value)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>现在 visibleData 的计算也需要更新，需要加入上下缓冲区</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">visibleData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> startIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start.value </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> aboveCount.value</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> endIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> end.value </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> belowCount.value</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _listData.value.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(startIdx, endIdx)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">visibleData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> startIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start.value </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> aboveCount.value</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> endIdx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> end.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> belowCount.value</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _listData.value.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(startIdx, endIdx)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>另外偏移量的计算也需要更新，需要将缓冲区考虑进去：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setStartOffset</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> startOffset</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start.value </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      positions.value[start.value].top </span><span style="color:#F97583;">-</span></span>
<span class="line"><span style="color:#E1E4E8;">      (positions.value[start.value </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> aboveCount.value]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> positions.value[start.value </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> aboveCount.value].top</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    startOffset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> positions.value[start.value </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].bottom </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> size</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    startOffset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  content.value.style.transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`translate3d(0,\${</span><span style="color:#E1E4E8;">startOffset</span><span style="color:#9ECBFF;">}px,0)\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setStartOffset</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> startOffset</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start.value </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      positions.value[start.value].top </span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">      (positions.value[start.value </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> aboveCount.value]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> positions.value[start.value </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> aboveCount.value].top</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    startOffset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> positions.value[start.value </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].bottom </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> size</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    startOffset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  content.value.style.transform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`translate3d(0,\${</span><span style="color:#24292E;">startOffset</span><span style="color:#032F62;">}px,0)\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote>`,23),E=[r];function y(i,d,F,u,g,D){return a(),n("div",null,E)}const v=s(c,[["render",y]]);export{h as __pageData,v as default};
