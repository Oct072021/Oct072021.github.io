import{_ as t,c as r,o,R as e}from"./chunks/framework.B60Tsb3Y.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/optimization/index.md","filePath":"zh/optimization/index.md","lastUpdated":1717222572000}'),s={name:"zh/optimization/index.md"},a=e('<h2 id="_1-webpack-常见优化手段" tabindex="-1">1.webpack 常见优化手段 <a class="header-anchor" href="#_1-webpack-常见优化手段" aria-label="Permalink to &quot;1.webpack 常见优化手段&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">提升开发体验</p><p>  使用 <strong>source-map</strong> 让开发或上线时代码报错时能有更加准确的错误提示</p></div><div class="warning custom-block"><p class="custom-block-title">提升打包构建速度</p><p>  使用 <strong>HotModuleReplacement(HMR)</strong> 让开发时只需重新编译有变化的代码，不变的代码使用缓存，从而使更新速度更快<br>   使用 <strong>OneOf</strong> 让资源文件只会被一种规则匹配，不会继续遍历，提升打包速度<br>   使用 <strong>include/exclude</strong> 只检测或排除某些文件，处理文件更少，提升打包速度<br>   使用 <strong>cache</strong> 对 eslint 和 babel 处理的结果进行缓存，二次打包更快<br>   使用 <strong>Thread</strong> 开启多进程打包，提升打包速度（<em>注意：进程开启需要 600ms 左右的时间，因此只对多文件处理有效，若文件较少，则适得其反</em>）</p></div><div class="warning custom-block"><p class="custom-block-title">减少代码体积</p><p>  使用 <strong>Tree Shaking</strong> 剔除没有使用的代码<br>   @babel/plugin-transform-runtime 插件对 babel 进行处理，让辅助代码从中引入，而不是每个文件都生成辅助代码<br>   Image minimizer 对本地图片进行压缩</p></div><div class="warning custom-block"><p class="custom-block-title">优化代码运行性能</p><p>  使用 <strong>code split</strong> 分割代码为多个 js 文件，从而是单个文件体积更小，并且加载更快，同时使用 <strong>import 动态导入</strong>语法进行按需加载<br>   使用 <strong>preload/prefetch</strong> 对代码进行提前加载<br>   使用 <strong>network cache</strong> 把模块之间的依赖关系保存在一个 runtime 文件中，若依赖的模块发生修改，则会修改 runtime 文件，而不是修改主模块。这样做的好处是：主模块的缓存不会失效，打包编译效率更高<br>   使用 <strong>core-js</strong> 进行兼容性处理<br>   使用 <strong>PWA</strong> 让代码离线也能访问</p></div><h2 id="_2-前端首页白屏优化" tabindex="-1">2.前端首页白屏优化 <a class="header-anchor" href="#_2-前端首页白屏优化" aria-label="Permalink to &quot;2.前端首页白屏优化&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>① 路由懒加载、图片懒加载<br> 对于 SPA 项目，当打开首页时，会一次性加载所有的资源，其中包括首页没有使用到的资源，造成首页加载慢<br> ② 组件懒加载<br> 适用条件=&gt;<br>  1)于体积大的文件，利用组件进行资源拆分<br>  2)需要特定条件才能触发的组件，入弹框<br>  3)复用性高的组件，可以有效利用缓存<br> ③ 合理利用 TreeShkaing<br> ④ 使用骨架屏<br> 项目打包时将骨架屏内容放到 html 根节点中，减少操作 dom 的次数<br> ⑤ 虚拟列表<br> 减少了渲染条数<br> ⑥Web Worker 优化长任务<br> ⑦js 延迟加载</p></div>',7),n=[a];function c(i,l,b,p,d,m){return o(),r("div",null,n)}const u=t(s,[["render",c]]);export{_ as __pageData,u as default};
